{"version":3,"sources":["components/FaceRecognition/FaceRecognition.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","App.js","reportWebVitals.js","index.js"],"names":["FaceRecognition","imageUrl","box","className","id","alt","src","width","height","style","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","Logo","display","justifyContent","perspective","glareEnable","glareMaxOpacity","scale","ImageLinkForm","onInputChange","onButtonSubmit","type","onChange","onClick","app","Clarifai","App","apiKey","particlesOptions","particles","number","value","density","enable","value_area","color","opacity","anim","size","random","speed","line_linked","move","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","top_row","right_col","bottom_row","left_col","displayFaceBox","setState","event","input","target","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","console","log","this","canvasClassName","params","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e509b6ee.chunk.js","sourcesContent":["import React from 'react';\r\nimport './FaceRecognition.css';\r\n\r\nconst FaceRecognition = ({ imageUrl, box }) => {\r\n  return (\r\n    <div className=\"center ma\">\r\n        <div className=\"absolute mt3\">\r\n          <img id='inputimage' alt='' src={imageUrl} width= '500px' height= 'auto'/>\r\n            <div className=\"bounding-box\" \r\n            style = {{ \r\n              top: box.topRow, \r\n              right: box.rightCol, \r\n              bottom: box.bottomRow, \r\n              left: box.leftCol  \r\n            }}>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FaceRecognition;","import React from 'react';\r\nimport Tilt from 'react-parallax-tilt';\r\nimport './Logo.css'\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <div className='ma1 mt4' style={{display: 'flex', justifyContent: 'center'}}>\r\n        <Tilt \r\n            className=\"Tilt br2 shadow-3\" \r\n            style={{ height: 130, width: 130 }}\r\n            perspective={500}\r\n            glareEnable={true}\r\n            glareMaxOpacity={0.6}\r\n            scale={1.02}> \r\n        </Tilt>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport './ImageLinkForm.css';\r\n\r\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit }) => {\r\n  return (\r\n    <div>\r\n       <p className='f5 pa2 white'>\r\n           {'This brain will detect faces in your pictures. Give it a try.. Provide an image link below :'}\r\n       </p>\r\n       <div className='center'>\r\n            <div className='form center pa3 br3 shadow-5'>\r\n                <input className=' f5 pa2 br2 ba b--light-blue w-70 center' type='text' onChange={onInputChange}/>\r\n                <button className='f4 ph3 pv2 br2 dib white bg-dark-blue link w-30 grow' onClick={onButtonSubmit}>Detect</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageLinkForm;","import React, { Component } from 'react';\nimport Clarifai from 'clarifai';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Particles from 'react-particles-js';\nimport './App.css';\n\nconst app = new Clarifai.App({\n  apiKey: 'f8c35d4bba2a47e3ae26bac44fb11cab'\n });\n \nconst particlesOptions = {\n  particles : {\n    number : {\n      value : 100,\n      density : {\n        enable : true,\n        value_area : 700,\n      }\n    },\n    color: {\n      value: '#fff'\n    },\n    opacity: {\n      value: 0.5,\n      anim: {\n          enable: true\n      }\n    },\n    size: {\n      value: 7,\n      random: true,\n      anim: {\n          enable: true,\n          speed: 8\n      }\n    },\n    line_linked: {\n      enable: false\n    },\n    move: {\n      speed: 0.5\n    }\n    }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input : '',\n      imageUrl : '',\n      //This box will contain the values that we receive {leftCol, rightCol, topRow, bottomRow}\n      box : {},\n    }\n  }\n\n  //With onButtonSubmit, we calculateFaceLocation with the response and return an object by using below function\n  //The response is received as data here..\n  calculateFaceLocation = (data) => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById(\"inputimage\");\n      const width = Number(image.width);\n      const height = Number(image.height);\n      return {\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - (clarifaiFace.right_col * width),\n        bottomRow: height - (clarifaiFace.bottom_row * height),\n        leftCol: clarifaiFace.left_col * width,\n     };\n  };\n\n  //This will receive the calculated face-location-values of the image.\n  displayFaceBox = (box) => {\n    this.setState({ box: box })\n  }\n\n  onInputChange = (event) => {\n    this.setState({input : event.target.value});\n  }\n\n  onButtonSubmit = () => {\n    this.setState({imageUrl : this.state.input});\n      app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n      .then( response => this.displayFaceBox(this.calculateFaceLocation(response)))\n      .catch(err => console.log(err));\n  }\n\n  render() {\n    const { imageUrl, box } = this.state;\n      return (\n        <div className=\"App\">\n            <Particles canvasClassName='particles'\n            params={particlesOptions} \n            />\n            <Logo />\n            <ImageLinkForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit} />\n            <FaceRecognition box={box} imageUrl={imageUrl} />\n        </div>\n      );\n  }  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}